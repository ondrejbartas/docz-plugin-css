import loaderUtils from"loader-utils";import{createPlugin}from"docz-core";import MiniCssExtractPlugin from"mini-css-extract-plugin";import OptimizeCSSAssetsPlugin from"optimize-css-assets-webpack-plugin";import merge from"deepmerge";const getLocalIdent=(e,s,t,r)=>{const o=e.resourcePath.match(/index\.module\.(css|scss|sass)$/)?"[folder]":"[name]",l=loaderUtils.getHashDigest(e.resourcePath+t,"md5","base64",5);return loaderUtils.interpolateName(e,o+"_"+t+"__"+l,r).replace(".module_","_")},tests={postcss:/(\.module)?\.css$/,sass:/(\.module)?\.s(a|c)ss$/,less:/(\.module)?\.less$/,stylus:/(\.module)?\.styl(us)?$/},getStyleLoaders=(e,s)=>(t,r)=>[{loader:r?require.resolve("style-loader"):MiniCssExtractPlugin.loader},{loader:require.resolve("css-loader"),options:t},{loader:e,options:s}],loaders={postcss:(e={plugins:[]})=>getStyleLoaders(require.resolve("postcss-loader"),merge(e,{plugins:()=>{const s=[require("postcss-flexbugs-fixes"),require("autoprefixer")({flexbox:"no-2009"})];return e&&e.plugins&&Array.isArray(e.plugins)?e.plugins.concat(s):s}})),sass:(e={})=>getStyleLoaders(require.resolve("sass-loader"),merge({indentedSyntax:!1},e)),less:(e={})=>getStyleLoaders(require.resolve("less-loader"),e),stylus:(e={})=>getStyleLoaders(require.resolve("stylus-loader"),merge(e,{preferPathResolver:"webpack"}))},applyRule=(e,s,t)=>{const{preprocessor:r,cssOpts:o,loaderOpts:l,ruleOpts:i}=e,a=(0,loaders[r])(l),n=merge(o,Object.assign({importLoaders:1,sourceMap:!t},s&&{getLocalIdent:getLocalIdent}),"boolean"==typeof s?{modules:s}:{});return Object.assign({test:tests[r],use:a(n,t)},i)},defaultOpts={preprocessor:"postcss",cssmodules:void 0,loadersOpts:{},cssOpts:{},ruleOpts:{}},css=(e=defaultOpts)=>createPlugin({modifyBundlerConfig:(s,t)=>{if(s.module.rules.push(applyRule(e,e.cssmodules,t)),!t){const t=tests[e.preprocessor||"postcss"],r=s.optimization.minimizer||[],o=Object.assign({},s.optimization.splitChunks);s.optimization.minimizer=r.concat([new OptimizeCSSAssetsPlugin({})]),s.optimization.splitChunks=merge(o,{cacheGroups:{styles:{test:e=>t.test(e.type),name:"styles",chunks:"all",enforce:!0}}}),s.plugins.push(new MiniCssExtractPlugin({filename:"static/css/[name].[hash].css"}))}return s}});export{css};
